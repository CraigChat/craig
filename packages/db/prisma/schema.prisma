// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserToken {
  id           String   @id
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id String @id

  rewardTier      Int     @default(0)
  patronId        String?
  tierManuallySet Boolean @default(false)

  webapp Boolean @default(false)

  driveEnabled   Boolean @default(false)
  driveService   String  @default("google")
  driveFormat    String?
  driveContainer String?
  driveOptions   Json?

  entitlements Entitlement[]

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Ban {
  id        String   @id
  type      Int      @default(0)
  name      String?
  reason    String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Guild {
  id          String   @id
  accessRoles String[]
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
}

model Recording {
  id           String    @id
  accessKey    String
  deleteKey    String
  userId       String
  channelId    String
  guildId      String
  clientId     String
  shardId      Int
  autorecorded Boolean   @default(false)
  rewardTier   Int       @default(0)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  endedAt      DateTime? @db.Timestamptz(6)
  errored      Boolean   @default(false)
  expiresAt    DateTime  @db.Timestamptz(6)

  @@index([userId, createdAt(sort: Desc)])
}

model AutoRecord {
  id            String   @id @default(cuid())
  channelId     String
  clientId      String
  guildId       String
  userId        String
  postChannelId String?
  minimum       Int      @default(1)
  triggerUsers  String[]
  triggerRoles  String[]
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)

  @@index([clientId], type: Hash)
}

// Cloud Backup

model GoogleDriveUser {
  id           String  @id
  refreshToken String?
  token        String
}

model MicrosoftUser {
  id           String @id
  refreshToken String
  token        String
  name         String
  username     String
}

model DropboxUser {
  id           String @id
  refreshToken String
  token        String
  name         String
}

// Benefits & Entitlements

model Blessing {
  guildId   String   @id
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Patreon {
  id        String   @id
  name      String
  email     String
  cents     Int
  tiers     String[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Entitlement {
  userId              String
  source              String
  tier                Int
  expiresAt           DateTime?
  createdAt           DateTime  @default(now())
  note                String?
  sourceEntitlementId String?

  user User @relation(fields: [userId], references: [id])

  @@id([userId, source])
}

// Voice Server Tracking

model VoiceRegion {
  id     String   @id
  seenAt DateTime @default(now())

  rtcVersion   RegionRtcVersion?
  voiceVersion RegionVoiceVersion?
}

model RegionRtcVersion {
  regionId String      @id
  version  String
  endpoint String
  seenAt   DateTime    @default(now())
  region   VoiceRegion @relation(fields: [regionId], references: [id])
}

model RegionVoiceVersion {
  regionId String      @id
  version  String
  endpoint String
  seenAt   DateTime    @default(now())
  region   VoiceRegion @relation(fields: [regionId], references: [id])
}

model RtcVersion {
  version  String   @id
  regionId String
  endpoint String
  seenAt   DateTime @default(now())
}

model VoiceVersion {
  version  String   @id
  regionId String
  endpoint String
  seenAt   DateTime @default(now())
}
